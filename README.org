#+TITLE: 2048 CLI Debug
#+AUTHOR: Jason Walsh
#+DATE: [2025-06-25]
#+OPTIONS: toc:2

#+BEGIN_EXPORT html
<p align="center">
  <a href="https://github.com/jwalsh/2048-cli-debug"><img src="https://img.shields.io/badge/Status-DRAFT-orange?style=for-the-badge" alt="Status: DRAFT" /></a>
  <a href="https://en.wikipedia.org/wiki/C_(programming_language)"><img src="https://img.shields.io/badge/C-00599C?style=for-the-badge&logo=c&logoColor=white" alt="C" /></a>
  <a href="https://lldb.llvm.org/"><img src="https://img.shields.io/badge/LLDB-3F4145?style=for-the-badge&logo=llvm&logoColor=white" alt="LLDB" /></a>
  <a href="https://www.gnu.org/software/emacs/"><img src="https://img.shields.io/badge/Emacs-7F5AB6?style=for-the-badge&logo=gnu-emacs&logoColor=white" alt="Emacs" /></a>
  <a href="https://www.apple.com/macos/"><img src="https://img.shields.io/badge/macOS-000000?style=for-the-badge&logo=apple&logoColor=white" alt="macOS" /></a>
  <a href="https://opensource.org/licenses/MIT"><img src="https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge" alt="License: MIT" /></a>
</p>
#+END_EXPORT

Learning to interact with running programs through TTY, screen, expect, and eventually GDB/LLDB. Using [[https://github.com/Tiehuis/2048-cli][2048-cli]] as a test case for real-time program control and state inspection.

*The score doesn't matter - the interaction does!* 🎮

This project documents the journey from failed Python abstractions to successful expect scripts, with the ultimate goal of debugger-based program control.

* 🎮 Game Screenshots

** Starting Position
#+BEGIN_EXAMPLE
Score: 28 (+12)
   Hi: 932
-----------------------------
|    2 |      |    4 |    8 |
|      |      |      |    8 |
|      |      |      |      |
|      |      |      |      |
-----------------------------
#+END_EXAMPLE

** High Score Achievement (Academically Validated Down-Right Strategy™)
#+BEGIN_EXAMPLE
Score: 1708 (+4) 🎉
   Hi: 932
-----------------------------
|    2 |      |    4 |   32 |
|      |    8 |  128 |    4 |
|    2 |   16 |    8 |   16 |
|   16 |    2 |  128 |    2 |
-----------------------------
#+END_EXAMPLE
/Achieved using the sophisticated "spam down and right" heuristic from academic research/

* 🚀 Features

- *LLDB Debug Scripts*: Automated board state dumps, memory inspection, and gameplay analysis
- *Emacs Integration*: Custom mode with compilation, debugging, and visualization support
- *Memory Analysis*: Tools for inspecting game state and board memory layout
- *AI Analysis*: Observe and analyze AI gameplay patterns
- *Build Automation*: Enhanced Makefile with debugging and source management targets
- *TTY Controller*: Automated gameplay with complexity detection and manual inspection points
- *Board Analyzer*: Real-time complexity scoring and strategy suggestions
- *Scientific Experiments*: Rigorous experimental framework in [[file:experiments/README.org][experiments/]]

* 📋 Requirements

| Tool       | Version | Required | Notes               |
|------------+---------+----------+---------------------|
| C Compiler | C99+    | ✅       | gcc/clang           |
| LLDB       | 14.0+   | ✅       | Primary debugger    |
| Emacs      | 25.1+   | ⭕       | For IDE features    |
| Make       | 3.81+   | ✅       | Build system        |
| etags      | Any     | ⭕       | Code navigation     |
| screen     | 4.0+    | ⭕       | TTY capture         |
| tmux       | 3.0+    | ✅       | TTY interaction     |
| Python     | 3.8+    | ✅       | Analysis scripts    |
| uv         | 0.1+    | ✅       | Python environment  |

* 🛠️ Installation

#+BEGIN_SRC bash
# Clone the repository
git clone https://github.com/jwalsh/2048-cli-debug.git
cd 2048-cli-debug

# Build the game
cd 2048-cli-0.9.1
make

# Build with debug symbols
make CFLAGS="-g -O0"

# Generate tags for navigation
make etags
#+END_SRC

* 🎯 Quick Start

** Running the Game

#+BEGIN_SRC bash
# Play interactively
./2048

# Watch AI play
./2048 --ai

# Custom board size
./2048 --size 5
#+END_SRC

** TTY Controller

#+BEGIN_SRC bash
# Set up Python environment
uv sync

# Run automated test with manual inspection points
uv run python -m tty_manual.manual_test_runner \
  --spam-moves 50 \
  --check-interval 10 \
  --threshold 60

# Analyze a board snapshot
uv run python -m tty_manual.board_analyzer board_test.txt

# Interactive TTY reader
uv run python -m tty_manual.tty_reader --interactive
#+END_SRC

** Debugging

#+BEGIN_SRC bash
# Basic debugging session
lldb ./2048 -s debug.lldb

# Interactive debugging with custom commands
lldb ./2048 -s debug-interactive.lldb

# Automated analysis
lldb ./2048 -s debug-automated.lldb
#+END_SRC

** Emacs Integration

Add to your Emacs configuration:

#+BEGIN_SRC elisp
(add-to-list 'load-path "/path/to/2048-cli-debug/2048-cli-0.9.1/")
(require '2048-mode)
#+END_SRC

Key bindings:
- ~C-c C-c~ - Compile
- ~C-c C-d~ - Debug with LLDB
- ~C-c C-r~ - Run game
- ~C-c C-a~ - Run with AI

* 📁 Project Structure

#+BEGIN_EXAMPLE
2048-cli-debug/
├── 2048-cli-0.9.1/         # Game source code
│   ├── src/                # C source files
│   ├── debug*.lldb         # LLDB scripts
│   ├── 2048-mode.el        # Emacs mode
│   └── Makefile            # Build configuration
├── experiments/            # Scientific experiments
│   ├── README.org          # Experiment overview
│   ├── exp_007/            # Memory layout discovery
│   ├── exp_008/            # Statistical validation
│   ├── exp_009/            # Speed baseline
│   ├── exp_010/            # Timing validation
│   └── ...                 # More experiments
├── docs/                   # Documentation
├── tty_manual/             # TTY interaction framework
├── README.org              # This file
├── CONTRIBUTING.org        # Contribution guidelines
├── ARCHITECTURE.org        # System architecture
└── LICENSE                 # MIT License
#+END_EXAMPLE

* 🔬 Scientific Experiments

The [[file:experiments/][experiments/]] directory contains rigorous scientific investigations:

** Completed Experiments
- *Exp 007*: Memory Layout Proof - Discovered ~grid[col][row]~ indexing
- *Exp 008*: Statistical Validation - Down-right spam distribution
- *Exp 009*: Speed Baseline - Found built-in 160ms/move delay
- *Exp 010*: Timing Validation - Non-linear timing behavior

** Ongoing Research
- *Exp 011*: Timing Curve Analysis - Board locking effects
- *Exp 012-016*: AI Players - Claude playing strategies
- *Exp 017-020*: LLDB Framework - Advanced debugging
- *Exp 021-025*: Pattern Analysis - Board representations

See [[file:experiments/README.org][experiments/README.org]] for detailed results and methodologies.

* 🔍 Debug Features

** LLDB Scripts

- *debug.lldb*: Basic breakpoints with automatic board dumps
- *debug-interactive.lldb*: Custom commands (board, raw, state)
- *debug-automated.lldb*: AI gameplay analysis
- *debug-symbols.lldb*: Symbol and type information

** Memory Layout

The game uses a clever memory layout:
- Single contiguous array for board data
- 2D pointer array for column access (grid[col][row])
- Efficient for both cache and iteration

* 🤝 Contributing

See [[file:CONTRIBUTING.org][CONTRIBUTING.org]] for detailed guidelines on:
- Understanding the codebase
- Debugging techniques
- Emacs workflow
- Submitting changes

* 📚 Documentation

- [[file:ARCHITECTURE.org][Architecture Overview]]
- [[file:2048-cli-0.9.1/DEBUG-README.md][Debug Tools Guide]]
- [[file:2048-cli-0.9.1/README.md][Original Game Documentation]]
- [[file:experiments/README.org][Experiments Overview]]
- [[file:docs/][Additional Documentation]]

* 🙏 Acknowledgments

- Original [[https://github.com/Tiehuis/2048-cli][2048-cli]] by Marc Tiehuis
- 2048 game concept by Gabriele Cirulli

* 📄 License

This project maintains the MIT License from the original 2048-cli. See [[file:LICENSE][LICENSE]] for details.